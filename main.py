# main.py

import os
import asyncio
import json
from datetime import datetime, timedelta
from dotenv import load_dotenv

from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from telethon import TelegramClient
import anthropic
from zoneinfo import ZoneInfo

# 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–π –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
API_ID = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")
CLAUDE_API_KEY = os.getenv("CLAUDE_API_KEY")
SESSION_NAME = "news_bot_session"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª—é—á–µ–π
print(f"TELEGRAM_TOKEN –∑–∞–≥—Ä—É–∂–µ–Ω: {TELEGRAM_TOKEN is not None}")
print(f"API_ID –∑–∞–≥—Ä—É–∂–µ–Ω: {API_ID is not None}")
print(f"API_HASH –∑–∞–≥—Ä—É–∂–µ–Ω: {API_HASH is not None}")
print(f"CLAUDE_API_KEY –∑–∞–≥—Ä—É–∂–µ–Ω: {CLAUDE_API_KEY is not None}")

if not all([TELEGRAM_TOKEN, API_ID, API_HASH, CLAUDE_API_KEY]):
    print("–û–®–ò–ë–ö–ê: –ù–µ –≤—Å–µ –∫–ª—é—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ .env —Ñ–∞–π–ª–∞!")
    exit(1)

# 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
claude_client = anthropic.Anthropic(api_key=CLAUDE_API_KEY)

# –¢–∞–π–º–∑–æ–Ω–∞ –ò–µ—Ä—É—Å–∞–ª–∏–º–∞
JERUSALEM_TZ = ZoneInfo("Asia/Jerusalem")

# –ö–∞–Ω–∞–ª—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
TARGET_CHANNELS = ['NEWSruIsrael', 'DilimShavimPlus'] 

# --- –§–£–ù–ö–¶–ò–ò-–ü–û–ú–û–©–ù–ò–ö–ò ---

async def get_time_range(user_text: str):
    current_time = datetime.now(JERUSALEM_TZ)
    prompt = f"""
    –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ò–µ—Ä—É—Å–∞–ª–∏–º–µ: {current_time.isoformat()}.
    –û–ø—Ä–µ–¥–µ–ª–∏ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∏ –∫–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ó–∞–ø—Ä–æ—Å: "{user_text}"
    –í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å –∫–ª—é—á–∞–º–∏ "start_time" –∏ "end_time" –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO 8601.
    –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è, –≤–µ—Ä–Ω–∏ {{"start_time": null, "end_time": null}}.
    """
    try:
        response = claude_client.messages.create(
            model="claude-3-haiku-20240307",
            max_tokens=200,
            messages=[{"role": "user", "content": prompt}]
        )
        response_text = response.content[0].text.strip()
        start_idx = response_text.find('{')
        end_idx = response_text.rfind('}') + 1
        if start_idx != -1 and end_idx != 0:
            json_str = response_text[start_idx:end_idx]
            data = json.loads(json_str)
            if data.get("start_time") and data.get("end_time"):
                start = datetime.fromisoformat(data["start_time"]).astimezone(JERUSALEM_TZ)
                end = datetime.fromisoformat(data["end_time"]).astimezone(JERUSALEM_TZ)
                return start, end
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤—Ä–µ–º–µ–Ω–∏: {e}")
    return None

async def fetch_news_from_telegram(channels, start_time, end_time):
    all_posts = []
    try:
        async with TelegramClient(SESSION_NAME, int(API_ID), API_HASH) as client:
            for channel in channels:
                try:
                    entity = await client.get_entity(channel)
                    async for message in client.iter_messages(entity, offset_date=end_time):
                        msg_time = message.date.astimezone(JERUSALEM_TZ)
                        if msg_time < start_time:
                            break
                        if msg_time > end_time:
                            continue
                        if message.text and not message.is_reply:
                            post_text = f"–ò–∑ –∫–∞–Ω–∞–ª–∞ @{channel} ({msg_time.strftime('%H:%M %d.%m')}):\n{message.text}\n\n---\n"
                            all_posts.append(post_text)
                            if len(all_posts) >= 10:
                                break
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ {channel}: {e}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ Telethon: {e}")
        return []
    return all_posts

async def summarize_with_claude(posts):
    if not posts:
        return "–ù–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    full_text = "".join(posts)
    if len(full_text) > 15000:
        full_text = full_text[:15000] + "\n...(—Ç–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω)"
    prompt = f"""
    –¢—ã ‚Äî –ò–ò-–∞–Ω–∞–ª–∏—Ç–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π. –°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫—É—é –∏ —á–µ—Ç–∫—É—é –≤—ã–∂–∏–º–∫—É –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏–∑ Telegram-–∫–∞–Ω–∞–ª–æ–≤.
    –°–≥—Ä—É–ø–ø–∏—Ä—É–π –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–µ–º–∞–º. –£–±–µ—Ä–∏ –≤—Å–µ –º–∞–ª–æ–≤–∞–∂–Ω–æ–µ. 
    –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç –¥–ª—è Telegram, –∏—Å–ø–æ–ª—å–∑—É—è –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Ä–∞–∑–º–µ—Ç–∫–∏.
    –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–∏—á–µ–≥–æ, –æ—Å–Ω–æ–≤—ã–≤–∞–π—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–∫—Å—Ç–µ –Ω–∏–∂–µ.

    –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
    {full_text}
    """
    try:
        response = claude_client.messages.create(
            model="claude-3-5-sonnet-20241022",
            max_tokens=2000,
            messages=[{"role": "user", "content": prompt}]
        )
        return response.content[0].text
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏."

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ë–û–¢–ê ---

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    chat_id = update.message.chat_id
    print(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç {chat_id}: {user_text}")
    await context.bot.send_message(chat_id, "‚úÖ –ü—Ä–∏–Ω—è—Ç–æ! –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å...")

    time_range = await get_time_range(user_text)
    if not time_range:
        await context.bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω—è—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ '–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —á–∞—Å–æ–≤' –∏–ª–∏ '–∑–∞ –≤—á–µ—Ä–∞'.")
        return

    start_time, end_time = time_range
    await context.bot.send_message(
        chat_id, 
        f"–ò—â—É –ø–æ—Å—Ç—ã –≤ –∫–∞–Ω–∞–ª–∞—Ö {TARGET_CHANNELS} —Å {start_time.strftime('%H:%M %d.%m')} –ø–æ {end_time.strftime('%H:%M %d.%m')}..."
    )
    posts = await fetch_news_from_telegram(TARGET_CHANNELS, start_time, end_time)
    if not posts:
        await context.bot.send_message(chat_id, "ü§∑ –ù–æ–≤–æ—Å—Ç–µ–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    await context.bot.send_message(chat_id, f"–ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(posts)}. –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é...")
    summary = await summarize_with_claude(posts)
    if len(summary) > 4000:
        chunks = [summary[i:i+4000] for i in range(0, len(summary), 4000)]
        for i, chunk in enumerate(chunks):
            await context.bot.send_message(chat_id, f"–ß–∞—Å—Ç—å {i+1}:\n\n{chunk}")
    else:
        await context.bot.send_message(chat_id, summary)

# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---

def main():
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    try:
        application = Application.builder().token(TELEGRAM_TOKEN).build()
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        print("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        application.run_polling(drop_pending_updates=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main()
